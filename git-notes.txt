…or create a new repository on the command line
    echo "# nextjs-dashboard-tutorial" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git branch -M main
    git remote add origin https://github.com/blankoobi/nextjs-dashboard-tutorial.git
    git push -u origin main

…or push an existing repository from the command line
    git remote add origin https://github.com/blankoobi/nextjs-dashboard-tutorial.git
    git branch -M main
    git push -u origin main

프로젝트 내 변경된 파일 푸쉬
1. 저장소 초기화 (필요한 경우)
git init

2. 변경 사항 확인(.gitignore 파일 제외)
git status

3. 전체 추가
git add .

4. 커밋
git commit -m "comment"

5. 원격 저장소에 연결 (필요한 경우)
git remote add origin https://github.com/blankoobi/nextjs-dashboard-tutorial.git

6. 푸시
git push -u origin <branch name>


# tips
.gitignore 대상인지 체크
* git check-ignore -v <파일명 또는 경로>

디렉토리에서 .gitignore 파일을 모두 출력
git ls-files --others --ignored --exclude-standard

커밋 메시지
커밋 메시지는 나중에 협업이나 히스토리 탐색 시 매우 중요하니, 의미를 드러낼 수 있는 형태로 작성하는 습관을 들이면 좋습니다.

# git 파일 추적 해제
git rm --cached git-notes.txt
git commit -m "chore: <메시지>"
git push

----------
# Conventional Commits 기본 규칙
## 형식: <type>(optional scope): <subject>
    예) 
    feat: 대시보드 레이아웃 추가
    fix(auth): 로그인 실패 처리 버그 수정
    docs: README에 설치 방법 추가

## 주요 type 종류
| 타입         | 설명                             |
| ---------- | ------------------------------ |
| `feat`     | 새로운 기능 추가                      |
| `fix`      | 버그 수정                          |
| `docs`     | 문서 변경 (코드 변경 없음)               |
| `style`    | 코드 포맷팅, 세미콜론 누락 등 기능에 영향 없는 변경 |
| `refactor` | 코드 리팩토링 (기능 변경 없음)             |
| `test`     | 테스트 추가 또는 수정                   |
| `chore`    | 빌드, 설정 파일, 패키지 업데이트 등 기타 작업    |
| `perf`     | 성능 개선                          |

## scope는 선택사항
feat(auth): 소셜 로그인 기능 추가
fix(api): 응답 지연 문제 수정

## 커밋 메시지 예시
feat: 대시보드 초기 레이아웃 구성
fix: 테마 변경 시 스타일 충돌 해결
docs(readme): 프로젝트 실행 방법 추가
chore: ESLint 설정 파일 수정

## 추가 팁
커밋 메시지 제목(헤더)는 영문 기준 50자 이하, 대문자로 시작x, 마침표x
본문을 추가하고 싶으면 한 줄 띄우고 작성
----------